name: Python-CI

on:
  push:
    branches: [ main ]
    paths: 
      - 'app/python-postgres-user-registration/**'
  pull_request:
    branches: [ main ]
    paths: 
      - 'app/python-postgres-user-registration/**'

jobs:
  app-test:
    runs-on: ubuntu-latest
    
    env:
      POSTGRES_USER    : postgres
      POSTGRES_PASSWORD: 12345678
      POSTGRES_HOST    : localhost
      
    services:
      postgres:
        image: postgres:9.5
        env:       
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER    : ${{ env.POSTGRES_USER }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
    defaults:
        run:
          working-directory: app/python-postgres-user-registration/
    
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.5, 3.7, 3.9]
    
    steps:
    - name: Copy Repo
      uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
            
    - name: Create Table
      run: psql -U postgres -h localhost    < ../../create_table_users.sql
      env:
        POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
        PGPASSWORD   : ${{ env.POSTGRES_PASSWORD }}
        POSTGRES_USER: ${{ env.POSTGRES_USER }}
    - name: Run Tests
      run: |
        python app.py test
      env:
        PG_HOST: ${{ env.POSTGRES_HOST }}
  deploy-to-aws_ecr:
    runs-on: ubuntu-latest
    
    needs: [app-test]
    
    defaults:
        run:
          working-directory: app/
    steps:
      - name: Copy Repo
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.MY_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.MY_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: terraform-homework-1-python
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
#     - name: Upload Image to ECR
#       uses: appleboy/docker-ecr-action@master
#       with:
#         access_key: ${{ secrets.MY_AWS_ACCESS_KEY }}
#         secret_key: ${{ secrets.MY_AWS_SECRET_ACCESS_KEY }}
#         repo: terraform-homework-1-python
#         registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
#     - name: Success Message
#       run :  echo Deploy to AWS ECR success:)
