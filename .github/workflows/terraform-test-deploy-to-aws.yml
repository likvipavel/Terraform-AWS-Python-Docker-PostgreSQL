name: Terraform-CD

on:
  push:
    branches: [ main ]
    paths   :
    - '**.tf'
  pull_request:
    branches: [ main ]
    paths   :
    - '**.tf'
  workflow_run:
    workflows: [Python-CI]
    types    :
    - completed

jobs:
  test:
    runs-on: ubuntu-latest
        
    steps:
      - name: Copy Repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.MY_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.MY_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.2

      - name: Terraform Format
        id  : fmt
        run : |
          export TF_VAR_rds-password=${{ secrets.POSTGRES_PASSWORD }}
          terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id  : init
        run : terraform init
      
      - name: Terraform Validate
        id  : validate
        run : terraform validate -no-color

      - name: Terraform Plan
        id  : plan
        if  : github.event_name == 'pull_request'
        run : terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v6
        if  : github.event_name == 'pull_request'
        env :
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if  : steps.plan.outcome == 'failure'
        run : exit 1
        
      - name: Terraform Plan
        if  : github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event.workflow_run.conclusion == 'success'
        run : terraform plan -no-color

      - name: Terraform Apply
        if  : github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event.workflow_run.conclusion == 'success'
        run : terraform apply -auto-approve

      - name: Successs Message
        if  : github.event_name == 'push' || github.event.workflow_run.conclusion == 'success'
        run : echo "Terraform-CD success:)"
        
      - name: Successs Message
        if  : github.event_name == 'pull_request'
        run : echo "Terraform test success:)"
